#ifndef ANEMOI_H
#define ANEMOI_H

#define INPUT_SIZE_1 1
#define NB_ROUNDS_128BITS_INPUT_SIZE_1 19
// Nb constants (2 * l * NB ROUNDS) + State size (l * 2)
#define NB_CONSTANTS_128BITS_INPUT_SIZE_1                                      \
  (NB_ROUNDS_128BITS_INPUT_SIZE_1 * 2 * INPUT_SIZE_1)

#include "blst.h"
#include "blst_misc.h"
#include <string.h>

/*
  Constants have been generated using
  https://github.com/vesselinux/anemoi-hash/commit/6dbe01db361187fe9ea1853a54fdc832783c8dc5
  and the call to the function
      test_jive(
        n_tests=10,
        q=52435875175126190479447740508185965837690552500527637822603658699938581184513,
        alpha=5,
        n_rounds=19,
        n_cols=1,
        b=2,
        security_level=128)
  The number of rounds 19 comes from the paper.

  The values given by the script are (formatted as Fr.t list list):
  ```ocaml
  let c =
    [ [ "39"];
      ["41362478282768062297187132445775312675360473883834860695283235286481594490621"];
      ["9548818195234740988996233204400874453525674173109474205108603996010297049928"];
      ["25365440569177822667580105183435418073995888230868180942004497015015045856900"];
      ["34023498397393406644117994167986720327178154686105264833093891093045919619309"];
      ["38816051319719761886041858113129205506758421478656182868737326994635468402951"];
      ["35167418087531820804128377095512663922179887277669504047069913414630376083753"];
      ["25885868839756469722325652387535232478219821850603640827385444642154834700231"];
      ["8867588811641202981080659274007552529205713737251862066053445622305818871963"];
      ["36439756010140137556111047750162544185710881404522379792044818039722752946048"];
      ["7788624504122357216765350546787885309160020166693449889975992574536033007374"];
      ["3134147137704626983201116226440762775442116005053282329971088789984415999550"]
  ]
  ```
  ```ocaml

  ```
  and you can print the list below using these functions:
  ```ocaml
  let fmt_montgomery v =
    let x0, x1, x2, x3 =
      Bls12_381.Fr.(to_montgomery_le (of_string v))
    in
    Printf.sprintf
      "{.l = {%sul, %sul, %sul, %sul}}"
      (Unsigned.UInt64.to_string x0)
      (Unsigned.UInt64.to_string x1)
      (Unsigned.UInt64.to_string x2)
      (Unsigned.UInt64.to_string x3);;

  let print_list l =
    List.iteri
      (fun i xs ->
        let x = List.nth xs 0 in
        Printf.printf
          "// D%d\n// %s\n%s\n"
          i
          x
          (fmt_montgomery x)
      ) l;;
  ```

  alp
*/

// These are always the same for BLS12-381
// beta = g = first multiplicative generator = 7.
// NB: in the paper, page 17, another matrix is used:
// (1  2)
// (2  5)
static blst_fr BETA = {.l = {64424509425ul, 1721329240476523535ul,
                             18418692815241631664ul, 3824455624000121028ul}};
// delta = g^(-1)
// 14981678621464625851270783002338847382197300714436467949315331057125308909861
static blst_fr DELTA = {.l = {15811494917868205788ul, 16624336857528583898ul,
                              17920762862402342329ul, 7408687358795335574ul}};

// alpha = 5
static blst_fr ALPHA = {.l = {47244640245ul, 7411222800919301131ul,
                              14736824336091166661ul, 345034914438815205ul}};

// These values depend on the input size
static blst_fr ANEMOI_JIVE_ROUND_CONSTANTS_128BITS_INPUT_SIZE_1[NB_CONSTANTS_128BITS_INPUT_SIZE_1] = {
    // We interleave the constants C and D two by two
    // C0
    // 39
    {.l = {369367187370ul, 16017869003301918806ul, 14596568043751566901ul,
           1020568960729868734ul}},
    // D0
    // 14981678621464625851270783002338847382197300714436467949315331057125308909900
    {.l = {15811495291530360453ul, 8161302378582868785ul,
           10379367933804585962ul, 75739460060754957ul}},
    // C1
    // 41362478282768062297187132445775312675360473883834860695283235286481594490621
    {.l = {4170577526725354068ul, 4990770701190068081ul, 8336778931102778399ul,
           5505266389556783204ul}},
    // D1
    // 28253420209785428420233456008091632509255652343634529984400816700490470131093
    {.l = {9630914107757380667ul, 1258475103464374059ul, 4074185220593392298ul,
           2639960786484139527ul}},
    // C2
    // 9548818195234740988996233204400874453525674173109474205108603996010297049928
    {.l = {4594269610319771864ul, 9435151576635994940ul, 1996026795751277144ul,
           1560452788112133970ul}},
    // D2
    // 51511939407083344002778208487678590135577660247075600880835916725469990319313
    {.l = {7264967206210849666ul, 16143827440029857477ul, 110968098420048789ul,
           6404000683805083012ul}},
    // C3
    // 25365440569177822667580105183435418073995888230868180942004497015015045856900
    {.l = {16701346582019821453ul, 13953512793775924772ul,
           16163997651080395250ul, 6692900632066781842ul}},
    // D3
    // 46291121544435738125248657675097664742296276807186696922340332893747842754587
    {.l = {9806438281233376676ul, 931394924840213202ul, 9442264819348743323ul,
           5082353730523088669ul}},
    // C4
    // 34023498397393406644117994167986720327178154686105264833093891093045919619309
    {.l = {17611586257334538985ul, 15038277307584776375ul,
           3631056021132162359ul, 7181491060146042676ul}},
    // D4
    // 3650460179273129580093806058710273018999560093475503119057680216309578390988
    {.l = {17793909203631489560ul, 4784360104263992357ul, 8780195383945059211ul,
           4670215763352262479ul}},
    // C5
    // 38816051319719761886041858113129205506758421478656182868737326994635468402951
    {.l = {12583552058373933138ul, 10371266354002895826ul,
           2467657739571197716ul, 1023031118688406750ul}},
    // D5
    // 45802223370746268123059159806400152299867771061127345631244786118574025749328
    {.l = {4745334327031885054ul, 15027568145872437618ul, 6820396973286859559ul,
           5523551184219637481ul}},
    // C6
    // 35167418087531820804128377095512663922179887277669504047069913414630376083753
    {.l = {14146724836681663134ul, 8862133116684579525ul,
           10429737528937167448ul, 8288047545532538868ul}},
    // D6
    // 11798621276624967315721748990709309216351696098813162382053396097866233042733
    {.l = {12449731538627387747ul, 12531632181757593559ul,
           14222486200825963925ul, 7203063445117709109ul}},
    // C7
    // 25885868839756469722325652387535232478219821850603640827385444642154834700231
    {.l = {2267425026694936390ul, 14404046692004012683ul,
           10432866881286212694ul, 988788385724671624ul}},
    // D7
    // 42372918959432199162670834641599336326433006968669415662488070504036922966492
    {.l = {15726611089689556459ul, 5795507155888605609ul, 3445565931366403624ul,
           1543995368721623802ul}},
    // C8
    // 8867588811641202981080659274007552529205713737251862066053445622305818871963
    {.l = {9278075440598710854ul, 12294599707394996737ul,
           14037665908864262709ul, 1851526354064786992ul}},
    // D8
    // 52181371244193189669553521955614617990714056725501643636576377752669773323445
    {.l = {5418445239864971111ul, 8754123880678542319ul, 3762767805934597682ul,
           3030763056320236985ul}},
    // C9
    // 36439756010140137556111047750162544185710881404522379792044818039722752946048
    {.l = {8176747803545890748ul, 3781551995455757149ul, 14489398713649572375ul,
           7653155928373156472ul}},
    // D9
    // 23791984554824031672195249524658580601428376029501889159059009332107176394097
    {.l = {10725566008572110773ul, 9300819939267475066ul,
           10713409829943209400ul, 8090793562345106443ul}},
    // C10
    // 7788624504122357216765350546787885309160020166693449889975992574536033007374
    {.l = {8740150973807756747ul, 5132003394075444975ul, 15161625327465921492ul,
           3828904568922565607ul}},
    // D10
    // 33342520831620303764059548442834699069640109058400548818586964467754352720368
    {.l = {8048872697722111699ul, 6586539522841126025ul, 3522530155149444520ul,
           6701144923734735709ul}},
    // C11
    // 3134147137704626983201116226440762775442116005053282329971088789984415999550
    {.l = {14221304550361053777ul, 17473759545749530400ul,
           16573058136738985576ul, 4067185459711892582ul}},
    // D11
    // 16791548253207744974576845515705461794133799104808996134617754018912057476556
    {.l = {14575492187598484303ul, 12453671724463651192ul,
           8246713543931304816ul, 4201146543640855641ul}},
    // C12
    // 50252287380741824818995733304361249016282047978221591906573165442023106203143
    {.l = {8362316204439224602ul, 5577252700882246336ul, 5055272325399647015ul,
           7642843202726798499ul}},
    // D12
    // 11087343419860825311828133337767238110556416596687749174422888171911517001265
    {.l = {13502703954848284088ul, 3943768041816546787ul, 131039509156825481ul,
           3120073282795300045ul}},
    // C13
    // 48434698978712278012409706205559577163572452744833134361195687109159129985373
    {.l = {17988864203834009837ul, 9118104227235696829ul,
           10104371015638660658ul, 1918713587088085605ul}},
    // D13
    // 11931207770538477937808955037363240956790374856666237106403111503668796872571
    {.l = {8986897760763454771ul, 7089904431347670909ul, 2139814013374435106ul,
           7716378250245333616ul}},
    // C14
    // 32960510617530186159512413633821386297955642598241661044178889571655571939473
    {.l = {8360704106197291856ul, 4436663908069900342ul, 12210521579202648519ul,
           511843160031525084ul}},
    // D14
    // 3296943608590459582451043049934874894049468383833500962645016062634514172805
    {.l = {14022542500526828544ul, 12912847913272576175ul,
           9317208712459648801ul, 86263961955415746ul}},
    // C15
    // 12850897859166761094422335671106280470381427571695744605265713866647560628356
    {.l = {12579013181154747171ul, 2060841214762274663ul, 721551750131023491ul,
           4053551778778928434ul}},
    // D15
    // 7080580976521357573320018355401935489220216583936865937104131954142364033647
    {.l = {10013221635359120038ul, 16177267925742072462ul,
           11838565692419617256ul, 3780202431764725053ul}},
    // C16
    // 14578036872634298798382048587794204613583128573535557156943783762854124345644
    {.l = {490885040354948897ul, 3928912523636728580ul, 11620008694755109018ul,
           5567022720363307848ul}},
    // D16
    // 25990144965911478244481527888046366474489820502460615136523859419965697796405
    {.l = {7082935381019747451ul, 13409420108194203116ul, 2162895577432005ul,
           5237983099801576675ul}},
    // C17
    // 21588109842058901916690548710649523388049643745013696896704903154857389904594
    {.l = {17221958730099159510ul, 2012012309820784034ul, 5840394014031503079ul,
           1632822489449101207ul}},
    // D17
    // 33907313384235729375566529911940467295099705980234607934575786561097199483218
    {.l = {13635259357895193414ul, 7503773473633967881ul, 7337684202619391550ul,
           852357166818562430ul}},
    // C18
    // 35731638686520516424752846654442973203189295883541072759390882351699754104989
    {.l = {12101411954634896752ul, 4045609701959667708ul,
           18118227478942048702ul, 6933617356541239082ul}},
    // D18
    // 25996950265608465541351207283024962044374873682152889814392533334239395044136
    {.l = {12027257987959925002ul, 10811558767416674265ul,
           8451328163049581367ul, 4860546105390490080ul}}

};

void anemoi_jive128_1_compress(blst_fr *res, blst_fr *x, blst_fr *y);

#endif
